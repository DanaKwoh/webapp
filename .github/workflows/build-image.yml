name: Build and Create Custom Image

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install MySQL Server
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service
  
      - name: Configure MySQL
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_USER_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DB_NAME: ${{ secrets.DB_NAME }} 
        run: |
          sudo mysql -e "CREATE USER '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_USER_PASSWORD}';" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "CREATE DATABASE \`${MYSQL_DB_NAME}\`;" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "GRANT ALL PRIVILEGES ON \`${MYSQL_DB_NAME}\`.* TO '${MYSQL_USER}'@'localhost';" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "FLUSH PRIVILEGES;" -p"${MYSQL_ROOT_PASSWORD}"

      - name: Check MySQL Service Status
        run: |
          sudo systemctl status mysql.service

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
    
      # Write package.json content to a file
      - name: Write package.json
        run: npm init -y
        
      - name: Install packages
        run: npm install express sequelize dotenv mysql2 bcrypt basic-auth ci axios

      - name: Run the app
        run: nohup node app.js &
        env:
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_NAME: ${{ secrets.DB_NAME }}
            MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
            MYSQL_PORT: ${{ secrets.MYSQL_PORT }}

      # Run integration tests
      - name: Run integration test 1
        run: node tests/test1.js

      # Run integration tests
      - name: Run integration test 2
        run: node tests/test2.js

      - name: Write GCP Credentials File
        env:
          CREDENTIALS_GCP: ${{ secrets.CREDENTIAL_GCP }}
        run: |
          echo "$CREDENTIALS_GCP" > credentials.json

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 'latest'
      
      - name: Build Application Artifact
        run: zip -r webapp.zip .
        
      - name: Archive Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp-artifact
          path: |
            webapp.zip
      

  build-custom-image:
    needs: build-artifact  # This ensures Packer job runs only if the build job succeeds
    runs-on: ubuntu-latest
    steps:
      # - name: Setup gcloud CLI
      #   uses: google-github-actions/setup-gcloud@v2
      #   # Setup and configure steps

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: webapp-artifact
          path: /home/runner/work
          
      - name: Build Custom Image with Packer
        run: |
          cd /home/runner/work/webapp/webapp
          ls /home/runner/work/webapp/webapp
          packer init .
          packer build -var-file="var.pkrvars.hcl" custom_image.pkr.hcl
        # Packer build step
