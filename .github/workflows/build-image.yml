name: Build and Create Custom Image

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-create-image:
    runs-on: ubuntu-latest

    steps:
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.CREDENTIAL_GCP }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info

      - name: Import configuration
        run: gcloud secrets DB_NAME --data-file=config.txt
        
      - name: Install MySQL Server
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service
  
      - name: Configure MySQL
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_USER_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DB_NAME: ${{ secrets.DB_NAME }} 
        run: |
          sudo mysql -e "CREATE USER '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_USER_PASSWORD}';" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "CREATE DATABASE \`${MYSQL_DB_NAME}\`;" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "GRANT ALL PRIVILEGES ON \`${MYSQL_DB_NAME}\`.* TO '${MYSQL_USER}'@'localhost';" -p"${MYSQL_ROOT_PASSWORD}"
          sudo mysql -e "FLUSH PRIVILEGES;" -p"${MYSQL_ROOT_PASSWORD}"

      - name: Check MySQL Service Status
        run: |
          sudo systemctl status mysql.service


      # Write package.json content to a file
      - name: Write package.json
        run: npm init -y

      - name: Install packages
        run: npm install express sequelize dotenv mysql2 bcrypt basic-auth ci axios

      - name: Run the app
        run: nohup node app.js &
        env:
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_NAME: ${{ secrets.DB_NAME }}
            MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
            MYSQL_PORT: ${{ secrets.MYSQL_PORT }}

      # Run integration tests
      - name: Run integration tests
        run: node tests/test2.js

      - name: Build Artifact
        run: |
          # Commands to build your application artifact
          # For example, if it's a Node.js app, you might use 'npm run build' or 'npm run package'
          npm run build

      # Create local user csye6225
      - name: Create local user
        run: sudo useradd -r -s /usr/sbin/nologin -g csye6225 csye6225

      # Copy artifacts and configuration files, set ownership
      - name: Copy artifacts and configuration files
        run: |
          sudo cp webapp.jar /tmp/webapp/
          sudo cp -r config/* /tmp/webapp/
          sudo chown -R csye6225:csye6225 /tmp/webapp


      # Add systemd service file and configure it
      - name: Configure systemd service
        run: |
          sudo cp systemd-service-file.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable systemd-service-file.service

      - name: Set up Packer
        uses: hashicorp/setup-packer@v1

      - name: Run Packer
        run: |
          packer build -var 'credentials_file_path=credentials.json' custom_image.pkr.hcl
        env:
          CREDENTIALS_GCP: ${{ secrets.CREDENTIAL_GCP }}

